{"filter":false,"title":"renderer.js","tooltip":"/stuff/js/lib/renderer.js","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":300,"column":4},"action":"remove","lines":["(function() {","","  Renderer = function(canvas) {","    var canvas = $(canvas).get(0)","    var ctx = canvas.getContext(\"2d\");","    var gfx = arbor.Graphics(canvas)","    var particleSystem = null","    var dom = $(canvas)","    var textTo = document.getElementById();","","    var that = {","      init: function(system) {","        particleSystem = system","        particleSystem.screenSize(canvas.width, canvas.height)","        particleSystem.screenPadding(36,60,36,60)","        ","        $(window).resize(that.resize)","        that.resize()","        that.initMouseHandling()","","","      },","      ","      ","","      resize:function(){","        canvas.width = $(window).width()","        canvas.height = .75* $(window).height()","        sys.screen({size:{width:canvas.width, height:canvas.height}})","        _vignette = null","        that.redraw()","      },","      ","      redraw: function() {","        if (!particleSystem) return","","        gfx.clear() // convenience Æ’: clears the whole canvas rect","","        // draw the nodes & save their bounds for edge drawing","        var nodeBoxes = {}","        particleSystem.eachNode(function(node, pt) {","          // node: {mass:#, p:{x,y}, name:\"\", data:{}}","          // pt:   {x:#, y:#}  node position in screen coords","","          // determine the box size and round off the coords if we'll be ","          // drawing a text label (awful alignment jitter otherwise...)","          var label = node.data.label || \"\"","          var w = ctx.measureText(\"\" + label).width + 10","          if (!(\"\" + label).match(/^[ \\t]*$/)) {","            pt.x = Math.floor(pt.x)","            pt.y = Math.floor(pt.y)","          } else {","            label = null","          }","","          // draw a rectangle centered at pt","          if (node.data.color)","            ctx.fillStyle = node.data.color","          else","            ctx.fillStyle = \"rgba(0,0,0,.2)\"","          if (node.data.color == 'none')","            ctx.fillStyle = \"white\"","","          if (node.data.shape == 'dot') {","            gfx.oval(pt.x - w / 2, pt.y - w / 2, w, w, {","              fill: ctx.fillStyle","            })","            nodeBoxes[node.name] = [pt.x - w / 2, pt.y - w / 2, w, w]","          } else {","            gfx.rect(pt.x - w / 2, pt.y - 10, w, 20, 4, {","              fill: ctx.fillStyle","            })","            nodeBoxes[node.name] = [pt.x - w / 2, pt.y - 11, w, 22]","          }","","          // draw the text","          if (label) {","            ctx.font = \"12px Helvetica\"","            ctx.textAlign = \"center\"","            ctx.fillStyle = \"white\"","            if (node.data.color == 'none')","              ctx.fillStyle = '#333333'","            ctx.fillText(label || \"\", pt.x, pt.y + 4)","            ctx.fillText(label || \"\", pt.x, pt.y + 4)","          }","        })","","","        // draw the edges","        particleSystem.eachEdge(function(edge, pt1, pt2) {","          // edge: {source:Node, target:Node, length:#, data:{}}","          // pt1:  {x:#, y:#}  source position in screen coords","          // pt2:  {x:#, y:#}  target position in screen coords","","          var weight = edge.data.weight","          var color = edge.data.color","","          if (!color || (\"\" + color).match(/^[ \\t]*$/))","            color = null","","          // find the start point","          var tail = intersect_line_box(pt1, pt2, nodeBoxes[edge.source.name])","          var head = intersect_line_box(tail, pt2, nodeBoxes[edge.target.name])","","          ctx.save()","          ctx.beginPath()","          ctx.lineWidth = (!isNaN(weight)) ? parseFloat(weight) : 1","          ctx.strokeStyle = (color) ? color : \"#cccccc\"","          ctx.fillStyle = null","","          ctx.moveTo(tail.x, tail.y)","          ctx.lineTo(head.x, head.y)","          ctx.stroke()","          ctx.restore()","","          // draw an arrowhead if this is a -> style edge","          if (edge.data.directed) {","            ctx.save()","            // move to the head position of the edge we just drew","            var wt = !isNaN(weight) ? parseFloat(weight) : 1","            var arrowLength = 6 + wt","            var arrowWidth = 2 + wt","            ctx.fillStyle = (color) ? color : \"#cccccc\"","            ctx.translate(head.x, head.y);","            ctx.rotate(Math.atan2(head.y - tail.y, head.x - tail.x));","","            // delete some of the edge that's already there (so the point isn't hidden)","            ctx.clearRect(-arrowLength / 2, -wt / 2, arrowLength / 2, wt)","","            // draw the chevron","            ctx.beginPath();","            ctx.moveTo(-arrowLength, arrowWidth);","            ctx.lineTo(0, 0);","            ctx.lineTo(-arrowLength, -arrowWidth);","            ctx.lineTo(-arrowLength * 0.8, -0);","            ctx.closePath();","            ctx.fill();","            ctx.restore()","          }","        })","","","","      },","      initMouseHandling: function() {","        // no-nonsense drag and drop (thanks springy.js)","        selected = null;","        nearest = null;","        var dragged = null;","        var oldmass = 1","        var mouse_is_down = false;","        var mouse_is_moving = false","","","        // set up a handler object that will initially listen for mousedowns then","        // for moves and mouseups while dragging","        var handler = {","          mousemove: function(e) {","            if (!mouse_is_down) {","              var pos = $(canvas).offset();","              _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)","              nearest = particleSystem.nearest(_mouseP);","","              if (!nearest.node) return false","              selected = (nearest.distance < 50) ? nearest : null","              if (selected && selected.node.data.link) {","                dom.addClass('linkable')","              } else {","                dom.removeClass('linkable')","              }","            }","            return false","          },","          clicked: function(e) {","            var pos = $(canvas).offset();","            _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)","            nearest = particleSystem.nearest(_mouseP);","","            if (!nearest.node) return false","            selected = (nearest.distance < 50) ? nearest : null","","            if (nearest && selected && nearest.node === selected.node) {","              var link = selected.node.data.link","              if (link.match(/^#/)) {","                $(that).trigger({","                  type: \"navigate\",","                  path: link.substr(1)","                })","              } else {","                window.open(link, \"_blank\")","              }","              return false","            }","          },","          mousedown: function(e) {","            var pos = $(canvas).offset();","            _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)","            selected = nearest = dragged = particleSystem.nearest(_mouseP);","","            if (dragged.node !== null)","              dragged.node.fixed = true","","            mouse_is_down = true","            mouse_is_moving = false","","            $(canvas).bind('mousemove', handler.dragged)","            $(window).bind('mouseup', handler.dropped)","","            return false","          },","          dragged: function(e) {","            var old_nearest = nearest && nearest.node._id","            var pos = $(canvas).offset();","            var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)","","            mouse_is_moving = true","","            if (!nearest) return","            if (dragged !== null && dragged.node !== null) {","              var p = particleSystem.fromScreen(s)","              dragged.node.p = p","            }","","            return false","          },","","          dropped: function(e) {","            if (dragged === null || dragged.node === undefined) return","            if (dragged.node !== null)","              dragged.node.fixed = false","            dragged.node.tempMass = 50","            dragged = null","            selected = null","            $(canvas).unbind('mousemove', handler.dragged)","            $(window).unbind('mouseup', handler.dropped)","            _mouseP = null","","            if (mouse_is_moving) {","              // console.log(\"was_dragged\")","            } else {","              handler.clicked(e)","            }","","            mouse_is_down = false","","            return false","          }","        }","        $(canvas).mousedown(handler.mousedown);","        $(canvas).mousemove(handler.mousemove);","","      }","","    }","","    // helpers for figuring out where to draw arrows (thanks springy.js)","    var intersect_line_line = function(p1, p2, p3, p4) {","      var denom = ((p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y));","      if (denom === 0) return false // lines are parallel","      var ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;","      var ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;","","      if (ua < 0 || ua > 1 || ub < 0 || ub > 1) return false","      return arbor.Point(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));","    }","","    var intersect_line_box = function(p1, p2, boxTuple) {","      var p3 = {","          x: boxTuple[0],","          y: boxTuple[1]","        },","        w = boxTuple[2],","        h = boxTuple[3]","      var tl = {","        x: p3.x,","        y: p3.y","      };","      var tr = {","        x: p3.x + w,","        y: p3.y","      };","      var bl = {","        x: p3.x,","        y: p3.y + h","      };","      var br = {","        x: p3.x + w,","        y: p3.y + h","      };","","      return intersect_line_line(p1, p2, tl, tr) ||","        intersect_line_line(p1, p2, tr, br) ||","        intersect_line_line(p1, p2, br, bl) ||","        intersect_line_line(p1, p2, bl, tl) ||","        false","    }","","    return that","  }","","})()"],"id":58},{"start":{"row":0,"column":0},"end":{"row":229,"column":4},"action":"insert","lines":["(function() {","","  Renderer = function(canvas) {","    var canvas = $(canvas).get(0)","    var ctx = canvas.getContext(\"2d\");","    var gfx = arbor.Graphics(canvas)","    var particleSystem = null","","    var that = {","      init: function(system) {","        particleSystem = system","        particleSystem.screenSize(canvas.width, canvas.height)","        particleSystem.screenPadding(40)","","        that.initMouseHandling()","      },","","      redraw: function() {","        if (!particleSystem) return","","        gfx.clear() // convenience Æ’: clears the whole canvas rect","","        // draw the nodes & save their bounds for edge drawing","        var nodeBoxes = {}","        particleSystem.eachNode(function(node, pt) {","          // node: {mass:#, p:{x,y}, name:\"\", data:{}}","          // pt:   {x:#, y:#}  node position in screen coords","","          // determine the box size and round off the coords if we'll be ","          // drawing a text label (awful alignment jitter otherwise...)","          var label = node.data.label || \"\"","          var w = ctx.measureText(\"\" + label).width + 10","          if (!(\"\" + label).match(/^[ \\t]*$/)) {","            pt.x = Math.floor(pt.x)","            pt.y = Math.floor(pt.y)","          } else {","            label = null","          }","","          // draw a rectangle centered at pt","          if (node.data.color)","            ctx.fillStyle = node.data.color","          else","            ctx.fillStyle = \"rgba(0,0,0,.2)\"","          if (node.data.color == 'none')","            ctx.fillStyle = \"white\"","","          if (node.data.shape == 'dot') {","            gfx.oval(pt.x - w / 2, pt.y - w / 2, w, w, {","              fill: ctx.fillStyle","            })","            nodeBoxes[node.name] = [pt.x - w / 2, pt.y - w / 2, w, w]","          } else {","            gfx.rect(pt.x - w / 2, pt.y - 10, w, 20, 4, {","              fill: ctx.fillStyle","            })","            nodeBoxes[node.name] = [pt.x - w / 2, pt.y - 11, w, 22]","          }","","          // draw the text","          if (label) {","            ctx.font = \"12px Helvetica\"","            ctx.textAlign = \"center\"","            ctx.fillStyle = \"white\"","            if (node.data.color == 'none')","              ctx.fillStyle = '#333333'","            ctx.fillText(label || \"\", pt.x, pt.y + 4)","            ctx.fillText(label || \"\", pt.x, pt.y + 4)","          }","        })","","","        // draw the qs","        particleSystem.eachEdge(function(edge, pt1, pt2) {","          // edge: {source:Node, target:Node, length:#, data:{}}","          // pt1:  {x:#, y:#}  source position in screen coords","          // pt2:  {x:#, y:#}  target position in screen coords","","          var weight = edge.data.weight","          var color = edge.data.color","","          if (!color || (\"\" + color).match(/^[ \\t]*$/))","            color = null","","          // find the start point","          var tail = intersect_line_box(pt1, pt2, nodeBoxes[edge.source.name])","          var head = intersect_line_box(tail, pt2, nodeBoxes[edge.target.name])","","          ctx.save()","          ctx.beginPath()","          ctx.lineWidth = (!isNaN(weight)) ? parseFloat(weight) : 1","          ctx.strokeStyle = (color) ? color : \"#cccccc\"","          ctx.fillStyle = null","","          ctx.moveTo(tail.x, tail.y)","          ctx.lineTo(head.x, head.y)","          ctx.stroke()","          ctx.restore()","","          // draw an arrowhead if this is a -> style edge","          if (edge.data.directed) {","            ctx.save()","            // move to the head position of the edge we just drew","            var wt = !isNaN(weight) ? parseFloat(weight) : 1","            var arrowLength = 6 + wt","            var arrowWidth = 2 + wt","            ctx.fillStyle = (color) ? color : \"#cccccc\"","            ctx.translate(head.x, head.y);","            ctx.rotate(Math.atan2(head.y - tail.y, head.x - tail.x));","","            // delete some of the edge that's already there (so the point isn't hidden)","            ctx.clearRect(-arrowLength / 2, -wt / 2, arrowLength / 2, wt)","","            // draw the chevron","            ctx.beginPath();","            ctx.moveTo(-arrowLength, arrowWidth);","            ctx.lineTo(0, 0);","            ctx.lineTo(-arrowLength, -arrowWidth);","            ctx.lineTo(-arrowLength * 0.8, -0);","            ctx.closePath();","            ctx.fill();","            ctx.restore()","          }","        })","","","","      },","      initMouseHandling: function() {","        // no-nonsense drag and drop (thanks springy.js)","        selected = null;","        nearest = null;","        var dragged = null;","        var oldmass = 1","","        // set up a handler object that will initially listen for mousedowns then","        // for moves and mouseups while dragging","        var handler = {","          clicked: function(e) {","            var pos = $(canvas).offset();","            _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)","            selected = nearest = dragged = particleSystem.nearest(_mouseP);","","            if (dragged.node !== null)","              dragged.node.fixed = true","","            $(canvas).bind('mousemove', handler.dragged)","            $(window).bind('mouseup', handler.dropped)","","            return false","          },","          dragged: function(e) {","            var old_nearest = nearest && nearest.node._id","            var pos = $(canvas).offset();","            var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)","","            if (!nearest) return","            if (dragged !== null && dragged.node !== null) {","              var p = particleSystem.fromScreen(s)","              dragged.node.p = p","            }","","            return false","          },","","          dropped: function(e) {","            if (dragged === null || dragged.node === undefined) return","            if (dragged.node !== null)","              dragged.node.fixed = false","            dragged.node.tempMass = 1000","            dragged = null","            selected = null","            $(canvas).unbind('mousemove', handler.dragged)","            $(window).unbind('mouseup', handler.dropped)","            _mouseP = null","            return false","          }","        }","        $(canvas).mousedown(handler.clicked);","","      }","","    }","","    // helpers for figuring out where to draw arrows (thanks springy.js)","    var intersect_line_line = function(p1, p2, p3, p4) {","      var denom = ((p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y));","      if (denom === 0) return false // lines are parallel","      var ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;","      var ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;","","      if (ua < 0 || ua > 1 || ub < 0 || ub > 1) return false","      return arbor.Point(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));","    }","","    var intersect_line_box = function(p1, p2, boxTuple) {","      var p3 = {","          x: boxTuple[0],","          y: boxTuple[1]","        },","        w = boxTuple[2],","        h = boxTuple[3]","      var tl = {","        x: p3.x,","        y: p3.y","      };","      var tr = {","        x: p3.x + w,","        y: p3.y","      };","      var bl = {","        x: p3.x,","        y: p3.y + h","      };","      var br = {","        x: p3.x + w,","        y: p3.y + h","      };","","      return intersect_line_line(p1, p2, tl, tr) ||","        intersect_line_line(p1, p2, tr, br) ||","        intersect_line_line(p1, p2, br, bl) ||","        intersect_line_line(p1, p2, bl, tl) ||","        false","    }","","    return that","  }","","})()"]}],[{"start":{"row":128,"column":0},"end":{"row":180,"column":7},"action":"remove","lines":["      initMouseHandling: function() {","        // no-nonsense drag and drop (thanks springy.js)","        selected = null;","        nearest = null;","        var dragged = null;","        var oldmass = 1","","        // set up a handler object that will initially listen for mousedowns then","        // for moves and mouseups while dragging","        var handler = {","          clicked: function(e) {","            var pos = $(canvas).offset();","            _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)","            selected = nearest = dragged = particleSystem.nearest(_mouseP);","","            if (dragged.node !== null)","              dragged.node.fixed = true","","            $(canvas).bind('mousemove', handler.dragged)","            $(window).bind('mouseup', handler.dropped)","","            return false","          },","          dragged: function(e) {","            var old_nearest = nearest && nearest.node._id","            var pos = $(canvas).offset();","            var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top)","","            if (!nearest) return","            if (dragged !== null && dragged.node !== null) {","              var p = particleSystem.fromScreen(s)","              dragged.node.p = p","            }","","            return false","          },","","          dropped: function(e) {","            if (dragged === null || dragged.node === undefined) return","            if (dragged.node !== null)","              dragged.node.fixed = false","            dragged.node.tempMass = 1000","            dragged = null","            selected = null","            $(canvas).unbind('mousemove', handler.dragged)","            $(window).unbind('mouseup', handler.dropped)","            _mouseP = null","            return false","          }","        }","        $(canvas).mousedown(handler.clicked);","","      }"],"id":59},{"start":{"row":128,"column":0},"end":{"row":230,"column":3},"action":"insert","lines":[" initMouseHandling:function(){","    // no-nonsense drag and drop (thanks springy.js)","    selected = null;","    nearest = null;","    var dragged = null;","    var oldmass = 1","    var mouse_is_down = false;","    var mouse_is_moving = false","","","    // set up a handler object that will initially listen for mousedowns then","    // for moves and mouseups while dragging","    var handler = {","      mousemove:function(e){","        if(!mouse_is_down){","          var pos = $(canvas).offset();","          _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)","          nearest = particleSystem.nearest(_mouseP);","","          if (!nearest.node) return false","          selected = (nearest.distance < 50) ? nearest : null","          if(selected && selected.node.data.link){","            dom.addClass('linkable')","          } else {","            dom.removeClass('linkable')","          }","        }","        return false","      },","      clicked:function(e){","        var pos = $(canvas).offset();","        _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)","        nearest = particleSystem.nearest(_mouseP);","","        if (!nearest.node) return false","        selected = (nearest.distance < 50) ? nearest : null","","        if (nearest && selected && nearest.node===selected.node){","          var link = selected.node.data.link","          if (link.match(/^#/)){","             $(that).trigger({type:\"navigate\", path:link.substr(1)})","          }else{","             window.open(link, \"_blank\")","          }","          return false","        }","      },","      mousedown:function(e){","        var pos = $(canvas).offset();","        _mouseP = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)","        selected = nearest = dragged = particleSystem.nearest(_mouseP);","","        if (dragged.node !== null) dragged.node.fixed = true","","        mouse_is_down = true","        mouse_is_moving = false","","        $(canvas).bind('mousemove', handler.dragged)","        $(window).bind('mouseup', handler.dropped)","","        return false","      },","      dragged:function(e){","        var old_nearest = nearest && nearest.node._id","        var pos = $(canvas).offset();","        var s = arbor.Point(e.pageX-pos.left, e.pageY-pos.top)","","        mouse_is_moving = true","","        if (!nearest) return","        if (dragged !== null && dragged.node !== null){","          var p = particleSystem.fromScreen(s)","          dragged.node.p = p","        }","","        return false","      },","","      dropped:function(e){","        if (dragged===null || dragged.node===undefined) return","        if (dragged.node !== null) dragged.node.fixed = false","        dragged.node.tempMass = 50","        dragged = null","        selected = null","        $(canvas).unbind('mousemove', handler.dragged)","        $(window).unbind('mouseup', handler.dropped)","        _mouseP = null","","        if(mouse_is_moving){","          // console.log(\"was_dragged\")","        } else {","          handler.clicked(e)","        }","","        mouse_is_down = false","","        return false","      }","    }","    $(canvas).mousedown(handler.mousedown);","    $(canvas).mousemove(handler.mousemove);","","  }"]}],[{"start":{"row":128,"column":0},"end":{"row":128,"column":5},"action":"insert","lines":["     "],"id":60,"ignore":true},{"start":{"row":128,"column":24},"end":{"row":128,"column":25},"action":"insert","lines":[" "]},{"start":{"row":128,"column":35},"end":{"row":128,"column":36},"action":"insert","lines":[" "]},{"start":{"row":129,"column":0},"end":{"row":129,"column":4},"action":"insert","lines":["    "]},{"start":{"row":130,"column":0},"end":{"row":130,"column":4},"action":"insert","lines":["    "]},{"start":{"row":131,"column":0},"end":{"row":131,"column":4},"action":"insert","lines":["    "]},{"start":{"row":132,"column":0},"end":{"row":132,"column":4},"action":"insert","lines":["    "]},{"start":{"row":133,"column":0},"end":{"row":133,"column":4},"action":"insert","lines":["    "]},{"start":{"row":134,"column":4},"end":{"row":134,"column":7},"action":"insert","lines":["   "]},{"start":{"row":134,"column":7},"end":{"row":134,"column":8},"action":"insert","lines":[" "]},{"start":{"row":135,"column":4},"end":{"row":135,"column":7},"action":"insert","lines":["   "]},{"start":{"row":135,"column":7},"end":{"row":135,"column":8},"action":"insert","lines":[" "]},{"start":{"row":138,"column":4},"end":{"row":138,"column":7},"action":"insert","lines":["   "]},{"start":{"row":138,"column":7},"end":{"row":138,"column":8},"action":"insert","lines":[" "]},{"start":{"row":139,"column":0},"end":{"row":139,"column":4},"action":"insert","lines":["    "]},{"start":{"row":140,"column":4},"end":{"row":140,"column":6},"action":"insert","lines":["  "]},{"start":{"row":140,"column":6},"end":{"row":140,"column":8},"action":"insert","lines":["  "]},{"start":{"row":141,"column":6},"end":{"row":141,"column":10},"action":"insert","lines":["    "]},{"start":{"row":141,"column":20},"end":{"row":141,"column":21},"action":"insert","lines":[" "]},{"start":{"row":141,"column":32},"end":{"row":141,"column":33},"action":"insert","lines":[" "]},{"start":{"row":142,"column":8},"end":{"row":142,"column":11},"action":"insert","lines":["   "]},{"start":{"row":142,"column":11},"end":{"row":142,"column":12},"action":"insert","lines":[" "]},{"start":{"row":142,"column":14},"end":{"row":142,"column":15},"action":"insert","lines":[" "]},{"start":{"row":142,"column":31},"end":{"row":142,"column":32},"action":"insert","lines":[" "]},{"start":{"row":143,"column":10},"end":{"row":143,"column":14},"action":"insert","lines":["    "]},{"start":{"row":144,"column":0},"end":{"row":144,"column":4},"action":"insert","lines":["    "]},{"start":{"row":144,"column":43},"end":{"row":144,"column":44},"action":"remove","lines":["-"]},{"start":{"row":144,"column":43},"end":{"row":144,"column":46},"action":"insert","lines":[" - "]},{"start":{"row":144,"column":63},"end":{"row":144,"column":64},"action":"remove","lines":["-"]},{"start":{"row":144,"column":63},"end":{"row":144,"column":66},"action":"insert","lines":[" - "]},{"start":{"row":145,"column":10},"end":{"row":145,"column":13},"action":"insert","lines":["   "]},{"start":{"row":145,"column":13},"end":{"row":145,"column":14},"action":"insert","lines":[" "]},{"start":{"row":147,"column":10},"end":{"row":147,"column":14},"action":"insert","lines":["    "]},{"start":{"row":148,"column":10},"end":{"row":148,"column":13},"action":"insert","lines":["   "]},{"start":{"row":148,"column":13},"end":{"row":148,"column":14},"action":"insert","lines":[" "]},{"start":{"row":149,"column":10},"end":{"row":149,"column":14},"action":"insert","lines":["    "]},{"start":{"row":149,"column":16},"end":{"row":149,"column":17},"action":"insert","lines":[" "]},{"start":{"row":149,"column":54},"end":{"row":149,"column":55},"action":"insert","lines":[" "]},{"start":{"row":150,"column":12},"end":{"row":150,"column":16},"action":"insert","lines":["    "]},{"start":{"row":151,"column":0},"end":{"row":151,"column":4},"action":"insert","lines":["    "]},{"start":{"row":152,"column":12},"end":{"row":152,"column":16},"action":"insert","lines":["    "]},{"start":{"row":153,"column":10},"end":{"row":153,"column":13},"action":"insert","lines":["   "]},{"start":{"row":153,"column":13},"end":{"row":153,"column":14},"action":"insert","lines":[" "]},{"start":{"row":154,"column":0},"end":{"row":154,"column":4},"action":"insert","lines":["    "]},{"start":{"row":155,"column":8},"end":{"row":155,"column":10},"action":"insert","lines":["  "]},{"start":{"row":155,"column":10},"end":{"row":155,"column":12},"action":"insert","lines":["  "]},{"start":{"row":156,"column":6},"end":{"row":156,"column":10},"action":"insert","lines":["    "]},{"start":{"row":157,"column":6},"end":{"row":157,"column":7},"action":"insert","lines":[" "]},{"start":{"row":157,"column":7},"end":{"row":157,"column":10},"action":"insert","lines":["   "]},{"start":{"row":157,"column":18},"end":{"row":157,"column":19},"action":"insert","lines":[" "]},{"start":{"row":157,"column":30},"end":{"row":157,"column":31},"action":"insert","lines":[" "]},{"start":{"row":158,"column":8},"end":{"row":158,"column":11},"action":"insert","lines":["   "]},{"start":{"row":158,"column":11},"end":{"row":158,"column":12},"action":"insert","lines":[" "]},{"start":{"row":159,"column":8},"end":{"row":159,"column":12},"action":"insert","lines":["    "]},{"start":{"row":159,"column":41},"end":{"row":159,"column":42},"action":"remove","lines":["-"]},{"start":{"row":159,"column":41},"end":{"row":159,"column":44},"action":"insert","lines":[" - "]},{"start":{"row":159,"column":61},"end":{"row":159,"column":62},"action":"remove","lines":["-"]},{"start":{"row":159,"column":61},"end":{"row":159,"column":64},"action":"insert","lines":[" - "]},{"start":{"row":160,"column":0},"end":{"row":160,"column":4},"action":"insert","lines":["    "]},{"start":{"row":162,"column":8},"end":{"row":162,"column":10},"action":"insert","lines":["  "]},{"start":{"row":162,"column":10},"end":{"row":162,"column":12},"action":"insert","lines":["  "]},{"start":{"row":163,"column":0},"end":{"row":163,"column":4},"action":"insert","lines":["    "]},{"start":{"row":165,"column":8},"end":{"row":165,"column":9},"action":"insert","lines":[" "]},{"start":{"row":165,"column":9},"end":{"row":165,"column":12},"action":"insert","lines":["   "]},{"start":{"row":165,"column":51},"end":{"row":165,"column":52},"action":"insert","lines":[" "]},{"start":{"row":165,"column":55},"end":{"row":165,"column":56},"action":"insert","lines":[" "]},{"start":{"row":165,"column":70},"end":{"row":165,"column":71},"action":"insert","lines":[" "]},{"start":{"row":166,"column":10},"end":{"row":166,"column":12},"action":"insert","lines":["  "]},{"start":{"row":166,"column":12},"end":{"row":166,"column":14},"action":"insert","lines":["  "]},{"start":{"row":167,"column":10},"end":{"row":167,"column":14},"action":"insert","lines":["    "]},{"start":{"row":167,"column":35},"end":{"row":167,"column":36},"action":"insert","lines":[" "]},{"start":{"row":168,"column":13},"end":{"row":168,"column":16},"action":"insert","lines":["   "]},{"start":{"row":168,"column":33},"end":{"row":169,"column":18},"action":"insert","lines":["","                  "]},{"start":{"row":169,"column":23},"end":{"row":169,"column":24},"action":"insert","lines":[" "]},{"start":{"row":169,"column":35},"end":{"row":170,"column":17},"action":"insert","lines":["","                 "]},{"start":{"row":170,"column":23},"end":{"row":170,"column":24},"action":"insert","lines":[" "]},{"start":{"row":170,"column":38},"end":{"row":171,"column":0},"action":"remove","lines":["})",""]},{"start":{"row":170,"column":38},"end":{"row":172,"column":3},"action":"insert","lines":["","                })","   "]},{"start":{"row":172,"column":13},"end":{"row":172,"column":14},"action":"remove","lines":["}"]},{"start":{"row":172,"column":13},"end":{"row":172,"column":16},"action":"insert","lines":[" } "]},{"start":{"row":172,"column":20},"end":{"row":172,"column":21},"action":"insert","lines":[" "]},{"start":{"row":173,"column":0},"end":{"row":173,"column":3},"action":"insert","lines":["   "]},{"start":{"row":174,"column":10},"end":{"row":174,"column":14},"action":"insert","lines":["    "]},{"start":{"row":175,"column":10},"end":{"row":175,"column":11},"action":"insert","lines":[" "]},{"start":{"row":175,"column":11},"end":{"row":175,"column":14},"action":"insert","lines":["   "]},{"start":{"row":176,"column":8},"end":{"row":176,"column":12},"action":"insert","lines":["    "]},{"start":{"row":177,"column":6},"end":{"row":177,"column":7},"action":"insert","lines":[" "]},{"start":{"row":177,"column":7},"end":{"row":178,"column":0},"action":"remove","lines":["},",""]},{"start":{"row":177,"column":7},"end":{"row":178,"column":4},"action":"insert","lines":["   },","    "]},{"start":{"row":178,"column":20},"end":{"row":178,"column":21},"action":"insert","lines":[" "]},{"start":{"row":178,"column":32},"end":{"row":178,"column":33},"action":"insert","lines":[" "]},{"start":{"row":179,"column":0},"end":{"row":179,"column":4},"action":"insert","lines":["    "]},{"start":{"row":180,"column":8},"end":{"row":180,"column":10},"action":"insert","lines":["  "]},{"start":{"row":180,"column":10},"end":{"row":180,"column":12},"action":"insert","lines":["  "]},{"start":{"row":180,"column":41},"end":{"row":180,"column":42},"action":"remove","lines":["-"]},{"start":{"row":180,"column":41},"end":{"row":180,"column":44},"action":"insert","lines":[" - "]},{"start":{"row":180,"column":61},"end":{"row":180,"column":62},"action":"remove","lines":["-"]},{"start":{"row":180,"column":61},"end":{"row":180,"column":64},"action":"insert","lines":[" - "]},{"start":{"row":181,"column":8},"end":{"row":181,"column":9},"action":"insert","lines":[" "]},{"start":{"row":181,"column":9},"end":{"row":181,"column":12},"action":"insert","lines":["   "]},{"start":{"row":183,"column":8},"end":{"row":183,"column":12},"action":"insert","lines":["    "]},{"start":{"row":183,"column":38},"end":{"row":184,"column":13},"action":"insert","lines":["","             "]},{"start":{"row":186,"column":8},"end":{"row":186,"column":12},"action":"insert","lines":["    "]},{"start":{"row":187,"column":0},"end":{"row":187,"column":4},"action":"insert","lines":["    "]},{"start":{"row":189,"column":8},"end":{"row":189,"column":12},"action":"insert","lines":["    "]},{"start":{"row":190,"column":0},"end":{"row":190,"column":4},"action":"insert","lines":["    "]},{"start":{"row":192,"column":8},"end":{"row":192,"column":12},"action":"insert","lines":["    "]},{"start":{"row":193,"column":6},"end":{"row":193,"column":9},"action":"insert","lines":["   "]},{"start":{"row":193,"column":9},"end":{"row":193,"column":10},"action":"insert","lines":[" "]},{"start":{"row":194,"column":0},"end":{"row":194,"column":4},"action":"insert","lines":["    "]},{"start":{"row":194,"column":18},"end":{"row":194,"column":19},"action":"insert","lines":[" "]},{"start":{"row":194,"column":30},"end":{"row":194,"column":31},"action":"insert","lines":[" "]},{"start":{"row":195,"column":0},"end":{"row":195,"column":4},"action":"insert","lines":["    "]},{"start":{"row":196,"column":0},"end":{"row":196,"column":4},"action":"insert","lines":["    "]},{"start":{"row":197,"column":8},"end":{"row":197,"column":12},"action":"insert","lines":["    "]},{"start":{"row":197,"column":39},"end":{"row":197,"column":40},"action":"remove","lines":["-"]},{"start":{"row":197,"column":39},"end":{"row":197,"column":42},"action":"insert","lines":[" - "]},{"start":{"row":197,"column":59},"end":{"row":197,"column":60},"action":"remove","lines":["-"]},{"start":{"row":197,"column":59},"end":{"row":197,"column":62},"action":"insert","lines":[" - "]},{"start":{"row":199,"column":8},"end":{"row":199,"column":12},"action":"insert","lines":["    "]},{"start":{"row":201,"column":8},"end":{"row":201,"column":11},"action":"insert","lines":["   "]},{"start":{"row":201,"column":11},"end":{"row":201,"column":12},"action":"insert","lines":[" "]},{"start":{"row":202,"column":0},"end":{"row":202,"column":4},"action":"insert","lines":["    "]},{"start":{"row":202,"column":58},"end":{"row":202,"column":59},"action":"insert","lines":[" "]},{"start":{"row":203,"column":10},"end":{"row":203,"column":11},"action":"insert","lines":[" "]},{"start":{"row":203,"column":11},"end":{"row":203,"column":14},"action":"insert","lines":["   "]},{"start":{"row":204,"column":0},"end":{"row":204,"column":4},"action":"insert","lines":["    "]},{"start":{"row":205,"column":8},"end":{"row":207,"column":0},"action":"remove","lines":["}","",""]},{"start":{"row":205,"column":8},"end":{"row":207,"column":4},"action":"insert","lines":["    }","","    "]},{"start":{"row":208,"column":6},"end":{"row":208,"column":10},"action":"insert","lines":["    "]},{"start":{"row":210,"column":6},"end":{"row":210,"column":9},"action":"insert","lines":["   "]},{"start":{"row":210,"column":9},"end":{"row":210,"column":10},"action":"insert","lines":[" "]},{"start":{"row":210,"column":18},"end":{"row":210,"column":19},"action":"insert","lines":[" "]},{"start":{"row":210,"column":30},"end":{"row":210,"column":31},"action":"insert","lines":[" "]},{"start":{"row":211,"column":8},"end":{"row":211,"column":9},"action":"insert","lines":[" "]},{"start":{"row":211,"column":9},"end":{"row":211,"column":12},"action":"insert","lines":["   "]},{"start":{"row":211,"column":23},"end":{"row":211,"column":24},"action":"insert","lines":[" "]},{"start":{"row":211,"column":27},"end":{"row":211,"column":28},"action":"insert","lines":[" "]},{"start":{"row":211,"column":48},"end":{"row":211,"column":49},"action":"insert","lines":[" "]},{"start":{"row":211,"column":52},"end":{"row":211,"column":53},"action":"insert","lines":[" "]},{"start":{"row":212,"column":0},"end":{"row":212,"column":4},"action":"insert","lines":["    "]},{"start":{"row":212,"column":38},"end":{"row":213,"column":13},"action":"insert","lines":["","             "]},{"start":{"row":214,"column":8},"end":{"row":214,"column":9},"action":"insert","lines":[" "]},{"start":{"row":214,"column":9},"end":{"row":214,"column":12},"action":"insert","lines":["   "]},{"start":{"row":215,"column":0},"end":{"row":215,"column":4},"action":"insert","lines":["    "]},{"start":{"row":216,"column":8},"end":{"row":216,"column":12},"action":"insert","lines":["    "]},{"start":{"row":217,"column":8},"end":{"row":217,"column":11},"action":"insert","lines":["   "]},{"start":{"row":217,"column":11},"end":{"row":217,"column":12},"action":"insert","lines":[" "]},{"start":{"row":218,"column":8},"end":{"row":218,"column":12},"action":"insert","lines":["    "]},{"start":{"row":219,"column":8},"end":{"row":219,"column":11},"action":"insert","lines":["   "]},{"start":{"row":219,"column":11},"end":{"row":219,"column":12},"action":"insert","lines":[" "]},{"start":{"row":221,"column":8},"end":{"row":221,"column":11},"action":"insert","lines":["   "]},{"start":{"row":221,"column":11},"end":{"row":221,"column":12},"action":"insert","lines":[" "]},{"start":{"row":221,"column":14},"end":{"row":221,"column":15},"action":"insert","lines":[" "]},{"start":{"row":221,"column":32},"end":{"row":221,"column":33},"action":"insert","lines":[" "]},{"start":{"row":222,"column":10},"end":{"row":222,"column":14},"action":"insert","lines":["    "]},{"start":{"row":223,"column":0},"end":{"row":223,"column":4},"action":"insert","lines":["    "]},{"start":{"row":224,"column":10},"end":{"row":224,"column":14},"action":"insert","lines":["    "]},{"start":{"row":225,"column":8},"end":{"row":225,"column":11},"action":"insert","lines":["   "]},{"start":{"row":225,"column":11},"end":{"row":225,"column":12},"action":"insert","lines":[" "]},{"start":{"row":227,"column":0},"end":{"row":227,"column":4},"action":"insert","lines":["    "]},{"start":{"row":229,"column":8},"end":{"row":229,"column":12},"action":"insert","lines":["    "]},{"start":{"row":230,"column":6},"end":{"row":231,"column":0},"action":"remove","lines":["}",""]},{"start":{"row":231,"column":0},"end":{"row":232,"column":4},"action":"insert","lines":["        }","    "]},{"start":{"row":233,"column":4},"end":{"row":233,"column":5},"action":"insert","lines":[" "]},{"start":{"row":233,"column":5},"end":{"row":233,"column":8},"action":"insert","lines":["   "]},{"start":{"row":235,"column":0},"end":{"row":235,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":6,"column":29},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":61},{"start":{"row":7,"column":0},"end":{"row":7,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":7,"column":4},"end":{"row":7,"column":23},"action":"insert","lines":["var dom = $(canvas)"],"id":62}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":7,"column":23},"end":{"row":7,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1540488920601,"hash":"6306a595bb8b38758b27b7d68aa73f96ecea71be"}